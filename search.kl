PROGRAM search
%COMMENT='Search process'
%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%NOABORT=ERROR+COMMAND+TPENABLE
%INCLUDE setp
%INCLUDE srch
%INCLUDE elnf
%INCLUDE cnwm
%INCLUDE diap
%INCLUDE klevkmsk
VAR
condition_num,contact_di,contact_do,error_do,vel_search,vel_back,range,dist,start_base_num,delay_time,relay_time IN CMOS:INTEGER
log_enb IN CMOS:BOOLEAN
correction:FILE
strt_pos,tool:XYZWPR
offset:VECTOR
srch_pos:XYZWPR
ref_pos:XYZWPR
temp:STRING[5]
corr_name:STRING[40]
calibrate,srch_ok,skip,out_of,pp:BOOLEAN
temp_name:STRING[20]
tmp_pos_strt,mess_pos:XYZWPR
old_vel,real_v:REAL
str_v:STRING[5]
teach_touch:STRING[15]
old_ovrd,int_v,entry,log_count,timer_touch,status:INTEGER
log_str IN DRAM: ARRAY[9] OF STRING[40]
CONST
ER_WARN = 0
SUCCESS = 0
cc_home = 137
cc_clear_win = 128
MAX_LOG = 9
MAX_VEL = 100
START_SBSTR = 10
LEN_SBSTR = 6
ERROR_DO_PULSE = 500
--------------------------------------------------------------------
--check status
ROUTINE chk_stat (rec_stat: INTEGER)
BEGIN
IF (rec_stat <> SUCCESS) THEN
	POST_ERR (rec_stat,'', 0, ER_WARN)
ENDIF
END chk_stat
--------------------------------------------------------------------
--write messages
ROUTINE message0(mes:STRING)
BEGIN
	WRITE TPERROR (CHR(cc_home) + CHR(cc_clear_win),mes)
END message0
--------------------------------------------------------------------
--write messages
ROUTINE message1(mes0:STRING;cor_n:STRING;mes1:STRING)
BEGIN
	WRITE TPERROR (CHR(cc_home) + CHR(cc_clear_win),mes0,cor_n,mes1)
END message1
--------------------------------------------------------------------
--write messages
ROUTINE message2(mes0:STRING;cor_n:STRING;mes1:STRING;offs:STRING;mes2:STRING)
BEGIN
	WRITE TPERROR (CHR(cc_home) + CHR(cc_clear_win),mes0,cor_n,mes1,offs,mes2)
END message2
---------------------------------------------------------------------
--write log
ROUTINE write_log(log:STRING)
VAR
count,time_int:INTEGER 
time_str:STRING[30]
BEGIN

GET_TIME(time_int)
CNV_TIME_STR(time_int, time_str)
time_str=SUB_STR(time_str,START_SBSTR,LEN_SBSTR)

IF UNINIT(log_count)=TRUE THEN
	log_count=1
ENDIF	

log_str[log_count]=log+time_str

WRITE(CHR(cc_home) + CHR(cc_clear_win))
	
IF log_count<MAX_LOG THEN	
	FOR count=log_count DOWNTO 1 DO
		WRITE(log_str[count],CR)
	ENDFOR
ELSE
	FOR count=MAX_LOG DOWNTO 1 DO
		WRITE (log_str[count],CR)
	ENDFOR
	FOR count=1 TO log_count-1 DO
		log_str[count]=log_str[count+1]	
	ENDFOR
ENDIF

log_count=log_count+1

IF log_count>=MAX_LOG THEN
	log_count=MAX_LOG	
ENDIF

END write_log
-------------------------------------------------------------------- 
--split file
ROUTINE split(data:STRING)
VAR
counter,count,indx:INTEGER
x_str,y_str,z_str:STRING[12]
cur_char:STRING[1]
temp_str:STRING[100]
chng:BOOLEAN
dt:ARRAY[11] OF STRING[12]
BEGIN
	
indx=0
counter=0	
count=1

FOR count=1 TO 11 DO
	chng=FALSE
	temp_str=''
	dt[count]=''
	counter=indx+1
	REPEAT
		cur_char=SUB_STR(data,counter,1)
		IF cur_char<>',' THEN	
			IF NOT chng THEN				
				dt[count]=dt[count]+cur_char		
			ELSE		
				temp_str=temp_str+cur_char		
			ENDIF		
		ELSE	
			chng=TRUE	
			indx=counter	
		ENDIF
		counter=counter+1
	UNTIL cur_char=',' 
ENDFOR

CNV_STR_REAL(dt[1], srch_pos.x)
CNV_STR_REAL(dt[2], srch_pos.y)
CNV_STR_REAL(dt[3], srch_pos.z)
CNV_STR_REAL(dt[4], ref_pos.x)
CNV_STR_REAL(dt[5], ref_pos.y)
CNV_STR_REAL(dt[6], ref_pos.z)
CNV_STR_REAL(dt[7], offset.x)
CNV_STR_REAL(dt[8], offset.y)
CNV_STR_REAL(dt[9], offset.z)

IF dt[10]=' TRUE' THEN
	calibrate=TRUE
ENDIF
IF dt[10]=' FALSE' THEN
	calibrate=FALSE
ENDIF	
IF dt[11]=' TRUE' THEN
	srch_ok=TRUE
ENDIF
IF dt[11]=' FALSE' THEN
	srch_ok=FALSE
ENDIF

END split
---------------------------------------------------------------------
--round real var
ROUTINE okrugl1(rl:REAL):STRING
VAR
dataokr:REAL
dataint:INTEGER
offsetstr:STRING[9]
BEGIN
dataint=ROUND(rl*1000)
dataokr=dataint/1000
CNV_REAL_STR(dataokr, 7, 2, offsetstr)
RETURN (offsetstr)
END okrugl1
-------------------------------------------------------------------- 
--Read, write correction file
ROUTINE corr_file_rw(rw:BOOLEAN;errr:BOOLEAN)
VAR 
corr_path:STRING[50]
data_str:STRING[100]
srch_posx,srch_posy,srch_posz,ref_posx,ref_posy,ref_posz,offsetx,offsety,offsetz:STRING[9]
BEGIN
	
corr_path='fr:\correction\'+corr_name+'.dt'

IF rw=FALSE THEN
	CLR_IO_STAT(correction)
	OPEN FILE correction ('RW',corr_path)
	status = IO_STATUS(correction)
	IF status<>0 THEN
		WRITE TPERROR('Could not open correction file!', status, CR)
		PULSE DOUT[error_do] FOR ERROR_DO_PULSE
		WAIT FOR DOUT[error_do]=OFF
		PAUSE
	ELSE
		srch_posx=okrugl1(srch_pos.x)
		srch_posy=okrugl1(srch_pos.y)
		srch_posz=okrugl1(srch_pos.z)
		ref_posx=okrugl1(ref_pos.x)
		ref_posy=okrugl1(ref_pos.y)
		ref_posz=okrugl1(ref_pos.z)
		offsetx=okrugl1(offset.x)
		offsety=okrugl1(offset.y)
		offsetz=okrugl1(offset.z)
	
		IF errr=TRUE THEN
			srch_ok=FALSE
		ENDIF

		WRITE correction (srch_posx,',',srch_posy,',',srch_posz,',',ref_posx,',',ref_posy,',',ref_posz,',',offsetx,',',offsety,',',offsetz,',',calibrate,',',srch_ok,',',CR)
		CLOSE FILE correction
	ENDIF
ENDIF

IF rw=TRUE THEN
	CLR_IO_STAT(correction)
	OPEN FILE correction ('RO',corr_path)
	status = IO_STATUS(correction)
	IF status<>0 THEN
		IF log_enb THEN
			message1('Correction ',corr_name,' not teached!')
			write_log('Correction '+corr_name+' not teached!')
		ELSE
			WRITE(CHR(cc_home) + CHR(cc_clear_win))	
		ENDIF
		PULSE DOUT[error_do] FOR ERROR_DO_PULSE
		WAIT FOR DOUT[error_do]=OFF
		PAUSE
	ELSE
		READ correction(data_str,CR)     
		CLOSE FILE correction
		IF UNINIT(data_str) THEN
			IF log_enb THEN
				message1('Correction ',corr_name,' is empty!')
				write_log('Correction '+corr_name+' is empty!')
			ELSE
				WRITE(CHR(cc_home) + CHR(cc_clear_win))	
			ENDIF
			PULSE DOUT[error_do] FOR ERROR_DO_PULSE
			WAIT FOR DOUT[error_do]=OFF
			PAUSE	
		ENDIF	
		split(data_str)
	ENDIF
ENDIF

END corr_file_rw
-------------------------------------------------------------------- 
--move
ROUTINE movel(posit:XYZWPR;srch:BOOLEAN)
VAR
srch_dir,src_dist:VECTOR
tmp_pos_srch:XYZWPR
len_vec,cos_a,cos_b,cos_c:REAL
BEGIN	
	
old_vel=$SPEED	
	
$MOTYPE=LINEAR
$TERMTYPE=FINE

IF srch=FALSE THEN
	$SPEED=vel_back
	tmp_pos_strt=posit
	DELAY relay_time
	MOVE TO posit
ENDIF

IF srch=TRUE THEN
	$SPEED=vel_search
	tmp_pos_srch=posit	
	srch_dir.x=tmp_pos_srch.x-tmp_pos_strt.x
	srch_dir.y=tmp_pos_srch.y-tmp_pos_strt.y
	srch_dir.z=tmp_pos_srch.z-tmp_pos_strt.z
	len_vec=SQRT(srch_dir.x*srch_dir.x+srch_dir.y*srch_dir.y+srch_dir.z*srch_dir.z)
	cos_a=srch_dir.x/len_vec
	cos_b=srch_dir.y/len_vec
	cos_c=srch_dir.z/len_vec
	src_dist.x=dist*cos_a
	src_dist.y=dist*cos_b
	src_dist.z=dist*cos_c
	MOVE RELATIVE src_dist		
ENDIF

END movel
---------------------------------------------------------------------
--offset string
ROUTINE okrugl(xoffs:REAL;yoffs:REAL;zoffs:REAL):STRING
VAR
dataokr,offset_real:REAL
dataint:INTEGER
offsetstr:STRING[7]
BEGIN
	
offset_real=SQRT(xoffs*xoffs+yoffs*yoffs+zoffs*zoffs)	
dataint=ROUND(offset_real*100)
dataokr=dataint/100
CNV_REAL_STR(dataokr, 4, 1, offsetstr)

IF (ABS(xoffs)>ABS(yoffs)) AND (ABS(xoffs)>ABS(zoffs)) THEN
	IF xoffs<0 THEN
		offsetstr = SUB_STR(offsetstr,2,STR_LEN(offsetstr))	
		offsetstr	=' -'+offsetstr
	ENDIF
ENDIF

IF (ABS(yoffs)>ABS(xoffs)) AND (ABS(yoffs)>ABS(zoffs)) THEN
	IF yoffs<0 THEN
		offsetstr = SUB_STR(offsetstr,2,STR_LEN(offsetstr))	
		offsetstr	=' -'+offsetstr	
	ENDIF
ENDIF

IF (ABS(zoffs)>ABS(xoffs)) AND (ABS(zoffs)>ABS(yoffs)) THEN
	IF zoffs<0 THEN
		offsetstr = SUB_STR(offsetstr,2,STR_LEN(offsetstr))	
		offsetstr	=' -'+offsetstr
	ENDIF
ENDIF

RETURN (offsetstr)
END okrugl
--------------------------------------------------------------------
--offset calculation
ROUTINE calc_offset
VAR
offset_real:REAL
offset_str:STRING[7]
BEGIN

offset.x=mess_pos.x-ref_pos.x
offset.y=mess_pos.y-ref_pos.y
offset.z=mess_pos.z-ref_pos.z

offset_real=SQRT(offset.x*offset.x+offset.y*offset.y+offset.z*offset.z)

IF (-offset_real<=-range) AND (offset_real>=range) THEN
	out_of=TRUE	
ENDIF	

offset_str=okrugl(offset.x,offset.y,offset.z)

IF log_enb THEN
	message2('Correction ',corr_name,' =',offset_str,'mm.')
	write_log('Correction '+corr_name+' ='+offset_str+'mm.')
ELSE
	WRITE(CHR(cc_home) + CHR(cc_clear_win))	
ENDIF

corr_file_rw(FALSE,FALSE)

END calc_offset
------------------------------------------------------------------- 
--get master position
ROUTINE master_posit

BEGIN
	
IF calibrate=FALSE THEN
	mess_pos=CURPOS(0,0)
	srch_ok=TRUE
	calc_offset
ENDIF	
		
IF calibrate=TRUE THEN
	ref_pos=CURPOS(0,0)
	srch_ok=TRUE
	calibrate=FALSE
	corr_file_rw(FALSE,FALSE)
	IF log_enb THEN
		message1('Correction ',corr_name,' calibrated.')
		write_log('Correction '+corr_name+' calibrated.')
	ELSE
		WRITE(CHR(cc_home) + CHR(cc_clear_win))	
	ENDIF
ENDIF

movel(strt_pos,FALSE)

END master_posit
--------------------------------------------------------------------
--timer start
ROUTINE timer_start
BEGIN
	
DISCONNECT TIMER timer_touch
timer_touch=0

CONNECT TIMER TO timer_touch
ENABLE CONDITION[condition_num+2]	

END timer_start
--------------------------------------------------------------------
--timer end
ROUTINE timer_end
BEGIN
	
DISCONNECT TIMER timer_touch
timer_touch=0

ENABLE CONDITION[condition_num+1]	

END timer_end
--------------------------------------------------------------------
--timer condition
ROUTINE timer_cond(start:BOOLEAN;offset:INTEGER)
BEGIN

IF start THEN
	DISCONNECT TIMER timer_touch
	timer_touch=0
ENDIF

PURGE CONDITION [condition_num+offset]

IF start THEN			
	CONDITION[condition_num+offset]:		
		WHEN DIN[contact_di]=ON DO
		timer_start
		DISABLE CONDITION[condition_num+offset]
	ENDCONDITION
ELSE
	CONDITION[condition_num+offset]:		
		WHEN DIN[contact_di]=OFF DO
		timer_end
		DISABLE CONDITION[condition_num+offset]
	ENDCONDITION
ENDIF

ENABLE CONDITION[condition_num+offset]				
	
END timer_cond
--------------------------------------------------------------------
--search condition
ROUTINE search_cond
BEGIN
	
timer_cond(TRUE,1)
timer_cond(FALSE,2)
srch_ok=FALSE
	
DOUT[contact_do]=ON	
PURGE CONDITION [condition_num]
			
CONDITION[condition_num]:		
	WHEN DIN[contact_di]=ON AND timer_touch >= relay_time DO

	CANCEL
	master_posit
	DOUT[contact_do]=OFF	

	DISABLE CONDITION[condition_num]
ENDCONDITION

ENABLE CONDITION[condition_num]				
	
END search_cond
-------------------------------------------------------------------- 
--stop timer and all conditions
ROUTINE stop_all_cond
VAR
count:INTEGER
BEGIN
FOR count=0 TO 2 DO
	PURGE CONDITION[condition_num+count]
ENDFOR
DISCONNECT TIMER timer_touch
timer_touch=0	
END stop_all_cond
-------------------------------------------------------------------- 
--teach
ROUTINE teach(err:BOOLEAN;dict_name:STRING;ele_number:INTEGER)
VAR
value_array:ARRAY[1] OF STRING[12]
inact_array:ARRAY[1] OF BOOLEAN
change_array:ARRAY[1] OF BOOLEAN
term_char:INTEGER
BEGIN

FORCE_LINK(TP_PANEL,'CONFIG=single')
FORCE_SPMENU(TP_PANEL, SPI_TPUSER2, 1)

DISCTRL_FORM(dict_name,ele_number,value_array,inact_array,change_array,kc_func_key,1,term_char,status)
chk_stat(status)

IF term_char = 133 THEN
	skip=FALSE
ENDIF	

IF (term_char = 141) AND (err=FALSE) THEN
	srch_pos=CURPOS(0,0)
ENDIF	

IF (term_char = 134) AND (err=TRUE) THEN	
	skip=TRUE
ENDIF

FORCE_LINK(TP_PANEL,'CONFIG=double')
FORCE_SPMENU(TP_PANEL, SPI_TPTCH, 1)

END teach
-------------------------------------------------------------------- 
--setup
ROUTINE setup
VAR
value_array:ARRAY[12] OF STRING[20]
inact_array:ARRAY[1] OF BOOLEAN
change_array:ARRAY[1] OF BOOLEAN
term_char:INTEGER
BEGIN

value_array [1] = 'condition_num'
value_array [2] = 'contact_di'
value_array [3] = 'contact_do'
value_array [4] = 'error_do'
value_array [5] = 'vel_search'
value_array [6] = 'vel_back'
value_array [7] = 'range'
value_array [8] = 'dist'
value_array [9] = 'start_base_num'
value_array [10] = 'delay_time'
value_array [11] = 'relay_time'
value_array [12] = 'log_enb'

FORCE_LINK(TP_PANEL,'CONFIG=single')
FORCE_SPMENU(TP_PANEL, SPI_TPUSER2, 1)

DISCTRL_FORM('setp',setp,value_array,inact_array,change_array,kc_func_key,1,term_char,status)
chk_stat(status)

FORCE_LINK(TP_PANEL,'CONFIG=double')
FORCE_SPMENU(TP_PANEL, SPI_TPTCH, 1)

END setup
-------------------------------------------------------------------- 
--get error message
ROUTINE get_err_mess(message:STRING)
BEGIN
IF log_enb THEN
	message1('Correction ',corr_name,message)
	write_log('Corr. '+corr_name+message)
ELSE
	WRITE(CHR(cc_home) + CHR(cc_clear_win))	
ENDIF	
PULSE DOUT[error_do] FOR ERROR_DO_PULSE
WAIT FOR DOUT[error_do]=OFF
END get_err_mess
-------------------------------------------------------------------- 
--check_parameters
ROUTINE check_param
BEGIN
IF UNINIT(condition_num) OR UNINIT(contact_di) OR UNINIT(contact_do) OR UNINIT(error_do) OR UNINIT(vel_search) OR UNINIT(vel_back) OR UNINIT(range) OR UNINIT(dist) OR UNINIT(start_base_num) OR UNINIT(delay_time) OR UNINIT(relay_time) OR UNINIT(log_enb) THEN
	setup
ENDIF
IF UNINIT(condition_num) OR UNINIT(contact_di) OR UNINIT(contact_do) OR UNINIT(error_do) OR UNINIT(vel_search) OR UNINIT(vel_back) OR UNINIT(range) OR UNINIT(dist) OR UNINIT(start_base_num) OR UNINIT(delay_time) OR UNINIT(relay_time) OR UNINIT(log_enb) THEN
	message0('Set parameters!')
	write_log('Set parameters!')
	ABORT
ENDIF
END check_param
-------------------------------------------------------------------- 
--end_search
ROUTINE end_search
BEGIN
stop_all_cond
$MCR.$GENOVERRIDE = old_ovrd
IF teach_touch='Teach true'THEN
	PAUSE	
ENDIF
END end_search
-------------------------------------------------------------------- 
--main program
BEGIN	

check_param

$ARG_STRING[1].$TITLE = 'Search setup'
$ARG_STRING[1].$ITEM1 = 'Teach true'
$ARG_STRING[1].$ITEM2 = 'Teach false'

old_ovrd = $MCR.$GENOVERRIDE
$MCR.$GENOVERRIDE = MAX_VEL

DELAY delay_time

pp=FALSE
WAIT FOR pp=FALSE
	
KCL ('MKDIR fr:\correction',status)		
	
$UTOOL=$MNUTOOL[1,$MNUTOOLNUM[1]]
$UFRAME=$MNUFRAME[1,$MNUFRAMENUM[1]]

strt_pos=CURPOS(0,0)
offset.x=0
offset.y=0
offset.z=0
skip=FALSE
out_of=FALSE

GET_TPE_PRM(1,1,int_v,real_v,teach_touch, status)
chk_stat(status)
GET_TPE_PRM(2,1,int_v,real_v,corr_name, status)
chk_stat(status)

IF teach_touch='Teach true'THEN
	ref_pos.x=0
	ref_pos.y=0
	ref_pos.z=0	
	srch_ok=FALSE
	calibrate=TRUE
	teach(FALSE,'srch',srch)
	IF (strt_pos.x=srch_pos.x) AND  (strt_pos.y=srch_pos.y) AND (strt_pos.z=srch_pos.z) AND (strt_pos.w=srch_pos.w) AND (strt_pos.p=srch_pos.p) AND (strt_pos.r=srch_pos.r) THEN
		IF log_enb THEN
			message0('Start and search pos. are equal!')
			write_log('Start and search pos. are equal!')
		ELSE
			WRITE(CHR(cc_home)+CHR(cc_clear_win))	
		ENDIF
	ELSE	
		corr_file_rw(FALSE,FALSE)
		IF log_enb THEN
			message1('Correction ',corr_name,' teached.')
			write_log('Correction '+corr_name+' teached.')
		ELSE
			WRITE(CHR(cc_home)+CHR(cc_clear_win))	
		ENDIF
	ENDIF
	STOP
	end_search
	RETURN
ENDIF

REPEAT
	IF  DIN[contact_di]=OFF THEN
		IF teach_touch='Teach false' THEN
			corr_file_rw(TRUE,FALSE)
			movel(strt_pos,FALSE)
			search_cond
			movel(srch_pos,TRUE)
		ENDIF
	
		IF ( teach_touch='Teach false') AND(srch_ok=TRUE)  AND (calibrate=FALSE) AND (out_of=TRUE) THEN
			stop_all_cond
			get_err_mess(' - out of range!')
			PULSE DOUT[error_do] FOR ERROR_DO_PULSE
			WAIT FOR DOUT[error_do]=OFF
			teach(TRUE,'diap',diap)	
		ENDIF	
	
		IF ( teach_touch='Teach false') AND (srch_ok=FALSE) AND (calibrate=FALSE) AND (out_of=FALSE) THEN
			stop_all_cond
			movel(strt_pos,FALSE)
			srch_ok=FALSE
			get_err_mess(' - part not found!')	
			PULSE DOUT[error_do] FOR ERROR_DO_PULSE
			WAIT FOR DOUT[error_do]=OFF
			teach(TRUE,'elnf',elnf)	
			IF skip=TRUE THEN	
				corr_file_rw(TRUE,TRUE)		
				corr_file_rw(FALSE,TRUE)	
				end_search
				RETURN	
			ENDIF
		ENDIF
	ELSE	
		srch_ok=FALSE
		stop_all_cond
		get_err_mess(' - metall contact!')	
		PULSE DOUT[error_do] FOR ERROR_DO_PULSE
		WAIT FOR DOUT[error_do]=OFF
		teach(TRUE,'cnwm',cnwm)
		corr_file_rw(TRUE,TRUE)	
		corr_file_rw(FALSE,TRUE)
	ENDIF
UNTIL skip OR srch_ok

end_search

END search