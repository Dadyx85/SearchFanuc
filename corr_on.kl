PROGRAM corr_on
%COMMENT='Set correction'
%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%NOABORT=ERROR+COMMAND+TPENABLE
VAR
correction:FILE
status:INTEGER
new_base:POSITION
start_base_num FROM search:INTEGER
log_enb FROM search:BOOLEAN
offset:VECTOR
srch_ok:BOOLEAN
log_str FROM search:ARRAY[9] OF STRING[40]
CONST
ER_WARN = 0
SUCCESS = 0
cc_home = 137
cc_clear_win = 128
--------------------------------------------------------------------
--check status
ROUTINE chk_stat (rec_stat: INTEGER)
BEGIN
IF (rec_stat <> SUCCESS) THEN
	POST_ERR (rec_stat,'', 0, ER_WARN)
ENDIF
END chk_stat
--------------------------------------------------------------------
--write messages
ROUTINE message0(mes:STRING)
BEGIN
	WRITE TPERROR (CHR(cc_home) + CHR(cc_clear_win),mes)
END message0
--------------------------------------------------------------------
--write messages
ROUTINE message1(mes0:STRING;cor_n:STRING;mes1:STRING)
BEGIN
	WRITE TPERROR (CHR(cc_home) + CHR(cc_clear_win),mes0,cor_n,mes1)
END message1
---------------------------------------------------------------------
--write log
ROUTINE write_log(log:STRING) FROM search
-------------------------------------------------------------------- 
--split file
ROUTINE split(data:STRING)
VAR
counter,count,indx:INTEGER
x_str,y_str,z_str:STRING[12]
cur_char:STRING[1]
temp_str:STRING[100]
chng:BOOLEAN
dt:ARRAY[11] OF STRING[12]
BEGIN
	
indx=0
counter=0
count=1

FOR count=1 TO 11 DO
	chng=FALSE
	temp_str=''
	dt[count]=''
	counter=indx+1
	REPEAT
		cur_char=SUB_STR(data,counter,1)
		IF cur_char<>',' THEN	
			IF NOT chng THEN				
				dt[count]=dt[count]+cur_char		
			ELSE		
				temp_str=temp_str+cur_char		
			ENDIF		
		ELSE	
			chng=TRUE	
			indx=counter	
		ENDIF
		counter=counter+1
	UNTIL cur_char=',' 
ENDFOR

CNV_STR_REAL(dt[7], offset.x)
CNV_STR_REAL(dt[8], offset.y)
CNV_STR_REAL(dt[9], offset.z)

IF dt[11]=' TRUE' THEN 	
	srch_ok=TRUE	
ENDIF
IF dt[11]=' FALSE' THEN 	
	srch_ok=FALSE	
ENDIF

END split
-------------------------------------------------------------------- 
--Read, write correction file
ROUTINE corr_file_r(corr_name:STRING)
VAR 
corr_path:STRING[50]
data_str:STRING[100]
BEGIN
	
corr_path='fr:\correction\'+corr_name+'.dt'

CLR_IO_STAT(correction)
OPEN FILE correction ('RO',corr_path)
status = IO_STATUS(correction)
IF status<>0 THEN
	IF log_enb THEN
		message1('Correction ',corr_name,' not exist!!!')
		write_log('Correction '+corr_name+' not exist!!!')
	ELSE
		WRITE(CHR(cc_home) + CHR(cc_clear_win))	
	ENDIF
	PAUSE
ELSE
	READ correction(data_str,CR)     
	CLOSE FILE correction
	IF UNINIT(data_str) THEN
		message1('Correction ',corr_name,' is empty!')
		IF log_enb THEN
			write_log('Correction '+corr_name+' is empty!')
		ELSE
			WRITE(CHR(cc_home) + CHR(cc_clear_win))	
		ENDIF
		PAUSE	
	ENDIF
	split(data_str)
ENDIF

END corr_file_r
-------------------------------------------------------------------- 
--get message
ROUTINE get_mess(word1:STRING;corr_name:STRING;word2:STRING)
BEGIN
IF log_enb THEN
	message1(word1,corr_name,word2)
	write_log(word1+corr_name+word2)
ELSE
	WRITE(CHR(cc_home) + CHR(cc_clear_win))	
ENDIF
END get_mess
--------------------------------------------------------------------
--set correction
ROUTINE set_correction(num:INTEGER)
VAR
real_v:REAL
int_v:INTEGER
temp_base,corr_in_base:POSITION
corr_name:STRING[20]
BEGIN

GET_TPE_PRM(num,3,int_v,real_v,corr_name, status)
	
IF status=0 THEN
	corr_file_r(corr_name)	
	temp_base=$MNUFRAME[1,$MNUFRAMENUM[1]]
	corr_in_base=POS(offset.x,offset.y,offset.z,0,0,0,temp_base.config_data)
	new_base=temp_base:corr_in_base
	$MNUFRAME[1,$MNUFRAMENUM[1]]=new_base
ENDIF

IF (NOT UNINIT(corr_name)) AND (corr_name<>'') THEN
	IF srch_ok THEN	
		get_mess('Correction ',corr_name,' applied.')
	ELSE	
		get_mess('Search ',corr_name,' was skipped.')
	ENDIF
ENDIF

END set_correction
--------------------------------------------------------------------
--check_parameters
ROUTINE check_param FROM search
--------------------------------------------------------------------
--base_check
ROUTINE base_check(check_base:XYZWPR;corr_on_flg:BOOLEAN)
VAR
old_base: XYZWPR
bn:INTEGER
base_name:STRING[2]
BEGIN
IF UNINIT(check_base) THEN
	old_base=$MNUFRAME[1,$MNUFRAMENUM[1]]
	SET_POS_REG(start_base_num-1+$MNUFRAMENUM[1],old_base,status)
	chk_stat(status)
	
	bn=$MNUFRAMENUM[1]
	CNV_INT_STR(bn, 1, 0, base_name)

	SET_PREG_CMT(start_base_num-1+$MNUFRAMENUM[1],'Original base'+base_name,status)
	chk_stat(status)
ELSE
	IF corr_on_flg THEN
		set_correction(1)
		set_correction(2)
		set_correction(3)
	ENDIF
ENDIF
END base_check
-------------------------------------------------------------------- 
--main program
BEGIN

check_param

$UTOOL=$MNUTOOL[1,$MNUTOOLNUM[1]]
$UFRAME=$MNUFRAME[1,$MNUFRAMENUM[1]]

offset.x=0
offset.y=0
offset.z=0
	
srch_ok=FALSE

base_check(GET_POS_REG(start_base_num-1+$MNUFRAMENUM[1],status),TRUE)

END corr_on